---
title: "Comparing Raw Survival Data to Exponential Models"
author: "Eric Delmelle"
date: today
format: 
  html:
    theme: cosmo
    toc: true
    toc-depth: 3
    code-fold: false
    code-tools: true
    df-print: paged
    number-sections: true
    number-offset: 1
  pdf:
    toc: true
    number-sections: true
    number-offset: 1
    geometry: margin=1in
execute:
  warning: false
  message: false
  fig-width: 8
  fig-height: 5
---

  
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, fig.width = 10, fig.height = 8)
```

## Load Data and Create Kaplan-Meier Curve

-   note that we create a new variable 'time_years' where we divide the time into years.

```{r data-and-km}
library(survival)
library(ggplot2)
library(dplyr)

# Load lung cancer data
data(lung)
lung_clean <- lung %>% 
  filter(!is.na(time)) %>%
  mutate(time_years = time / 365.25)

# Create Kaplan-Meier estimate
surv_obj <- Surv(lung_clean$time_years, lung_clean$status - 1)
km_fit <- survfit(surv_obj ~ 1)

print(paste("Sample size:", length(lung_clean$time_years)))
print(paste("Number of deaths:", sum(lung_clean$status == 2)))
```

## Compare Different Exponential Models

```{r exponential-comparison}
# Time points for plotting exponential curves
time_grid <- seq(0, 3, length.out = 200)

# Try different lambda values
lambda_values <- c(0, 0.3, 0.6, 0.9, 1, 1.2, 1.8)

# Create plot data
plot_data <- data.frame()
for(lambda in lambda_values) {
  temp_data <- data.frame(
    time = time_grid,
    survival = exp(-lambda * time_grid),
    lambda = paste("λ =", lambda)
  )
  plot_data <- rbind(plot_data, temp_data)
}

# Extract KM data
km_data <- data.frame(
  time = km_fit$time,
  survival = km_fit$surv
)

# Create the comparison plot
ggplot() +
  # Kaplan-Meier curve (observed data)
  geom_step(data = km_data, 
            aes(x = time, y = survival), 
            color = "black", linewidth = 2.5, alpha = 0.8) +
  
  # Different exponential models
  geom_line(data = plot_data, 
            aes(x = time, y = survival, color = lambda), 
            linewidth = 1.5) +
  
  xlim(0, 3) + ylim(0, 1) +
  labs(
    title = "Observed Survival vs Exponential Models",
    subtitle = "Black line = Observed data (Kaplan-Meier)",
    x = "Time (years)",
    y = "Survival Probability",
    color = "Exponential Models"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    legend.position = "right",
    legend.title = element_text(face = "bold")
  )
```

## Side-by-Side Comparison

```{r side-by-side}
# Create individual plots for each lambda
plots <- list()

for(i in 1:length(lambda_values)) {
  lambda <- lambda_values[i]
  exp_data <- data.frame(
    time = time_grid,
    survival = exp(-lambda * time_grid)
  )
  
  p <- ggplot() +
    geom_step(data = km_data, 
              aes(x = time, y = survival), 
              color = "black", linewidth = 2) +
    geom_line(data = exp_data, 
              aes(x = time, y = survival), 
              color = "red", linewidth = 1.5, linetype = "dashed") +
    xlim(0, 3) + ylim(0, 1) +
    labs(title = paste("λ =", lambda),
         x = "Time (years)", y = "Survival") +
    theme_minimal() +
    theme(plot.title = element_text(hjust = 0.5, face = "bold"))
  
  plots[[i]] <- p
}

# Arrange plots
library(gridExtra)
do.call(grid.arrange, c(plots, ncol = 3))
```



## Summary

From these plots we can see:

- **λ = 0.3**: Too small - curve drops too slowly, overestimates long-term survival
- **λ = 0.6**: Decent - follows the general trend but a bit optimistic  
- **λ = 0.9**: Good fit - closely matches the observed curve
- **λ = 1.2**: Decent - slightly pessimistic but reasonable
- **λ = 1.8**: Too large - drops too quickly, underestimates survival

The exponential model S(t) = exp(-λt) provides a simple way to model survival, but finding the right λ value is crucial for a good fit to the data!

## Finding the Best Lambda Using Maximum Likelihood

Now let's use mathematics to find the optimal λ value and see how it compares to our visual assessment:

```{r find-best-lambda}
# Prepare data for MLE calculation
lung_clean <- lung_clean %>%
  mutate(event = status - 1)  # Convert to 0/1 coding

times <- lung_clean$time_years
events <- lung_clean$event

# Calculate key statistics for MLE
n <- length(times)
d <- sum(events)  # number of deaths
total_time <- sum(times)  # sum of all observed times

cat("=== Data Summary for MLE ===\n")
cat("Sample size (n):", n, "\n")
cat("Number of deaths (d):", d, "\n") 
cat("Number censored:", n - d, "\n")
cat("Total observed time:", round(total_time, 2), "person-years\n\n")

# Test many lambda values to find the best one
test_lambdas <- seq(0.1, 2.0, by = 0.05)  # More fine-grained search

results <- data.frame()
for(lam in test_lambdas) {
  # Log-likelihood formula: d * log(λ) - λ * Σt_i
  ll <- d * log(lam) - lam * total_time
  results <- rbind(results, data.frame(
    lambda = lam,
    log_likelihood = ll
  ))
}

# Find the best lambda
best_result <- results[which.max(results$log_likelihood), ]
best_lambda <- best_result$lambda
best_ll <- best_result$log_likelihood

cat("=== Search Results ===\n")
cat("Best λ from search:", best_lambda, "\n")
cat("Log-likelihood at best λ:", round(best_ll, 2), "\n")

# Compare with our visual guesses
visual_lambdas <- c(0.3, 0.6, 0.9, 1.2, 1.8)
cat("\n=== How Our Visual Guesses Compare ===\n")
for(lam in visual_lambdas) {
  ll <- d * log(lam) - lam * total_time
  diff <- best_ll - ll
  cat("λ =", lam, ": Log-likelihood =", round(ll, 2), 
      ", Difference from best:", round(diff, 2), "\n")
}
```

## Plot: Likelihood Function

Let's visualize how the likelihood changes across different λ values:

```{r plot-likelihood-function}
# Create the likelihood plot
ggplot(results, aes(x = lambda, y = log_likelihood)) +
  geom_line(color = "blue", linewidth = 1.2) +
  geom_point(color = "blue", size = 1, alpha = 0.6) +
  
  # Mark the optimal lambda
  geom_point(aes(x = best_lambda, y = best_ll), 
             color = "red", size = 4, shape = 17) +
  geom_vline(xintercept = best_lambda, color = "red", 
             linetype = "dashed", alpha = 0.7) +
  
  # Mark our visual lambda guesses
  geom_vline(data = data.frame(lam = visual_lambdas), 
             aes(xintercept = lam), 
             color = "gray", linetype = "dotted", alpha = 0.8) +
  
  labs(
    title = "Log-Likelihood Function for Different λ Values",
    subtitle = paste("Red triangle = Optimal λ (", best_lambda, "), Gray lines = Visual guesses", sep=""),
    x = "Lambda (λ)",
    y = "Log-Likelihood"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5)
  )

# Add some annotations for the visual guesses
cat("\n=== Visual Assessment vs Mathematical Optimum ===\n")
cat("Our visual 'good fit' was λ = 0.9\n")
cat("Mathematical optimum is λ =", best_lambda, "\n")
cat("Difference:", round(abs(0.9 - best_lambda), 3), "\n")
```

## Analytical Solution

The exponential distribution has a simple analytical solution for the MLE:

```{r analytical-mle}
# The MLE formula: λ_hat = d / Σt_i
lambda_mle_analytical <- d / total_time
ll_analytical <- d * log(lambda_mle_analytical) - lambda_mle_analytical * total_time

cat("=== Analytical MLE Solution ===\n")
cat("λ_MLE = d / Σt_i = ", d, " / ", round(total_time, 2), " = ", round(lambda_mle_analytical, 4), "\n", sep="")
cat("Log-likelihood:", round(ll_analytical, 2), "\n")

cat("\n=== Comparison of Methods ===\n")
cat("Grid search best λ:", best_lambda, "\n")
cat("Analytical MLE λ:", round(lambda_mle_analytical, 4), "\n")
cat("Difference:", round(abs(best_lambda - lambda_mle_analytical), 4), "\n")

cat("\nThe analytical solution is exact - any tiny difference is due to our grid spacing.\n")
```

## Final Comparison: Visual vs Mathematical

```{r final-comparison}
# Create a final comparison plot showing survival curves
final_lambdas <- c(0.9, best_lambda)
final_labels <- c("λ = 0.9 (Visual guess)", paste("λ =", best_lambda, "(MLE)"))

final_plot_data <- data.frame()
for(i in 1:length(final_lambdas)) {
  temp_data <- data.frame(
    time = time_grid,
    survival = exp(-final_lambdas[i] * time_grid),
    model = final_labels[i]
  )
  final_plot_data <- rbind(final_plot_data, temp_data)
}

# Create color mapping
mle_label <- paste("λ =", best_lambda, "(MLE)")
color_mapping <- c("λ = 0.9 (Visual guess)" = "green")
color_mapping[mle_label] <- "red"

ggplot() +
  # Kaplan-Meier curve
  geom_step(data = km_data, 
            aes(x = time, y = survival), 
            color = "black", linewidth = 2.5, alpha = 0.8) +
  
  # Comparison models
  geom_line(data = final_plot_data, 
            aes(x = time, y = survival, color = model), 
            linewidth = 1.8, alpha = 0.8) +
  
  scale_color_manual(values = color_mapping) +
  
  xlim(0, 3) + ylim(0, 1) +
  labs(
    title = "Visual Assessment vs Mathematical Optimum",
    subtitle = "Black = Observed data (Kaplan-Meier)",
    x = "Time (years)",
    y = "Survival Probability",
    color = "Models"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    legend.position = "bottom"
  )

cat("\n=== Conclusion ===\n")
cat("• Visual assessment (λ = 0.9) was very close to optimal!\n")
cat("• Mathematical MLE gives λ =", round(lambda_mle_analytical, 3), "\n")
cat("• Both models fit the data quite well\n")
cat("• The likelihood plot shows a clear single peak at the MLE\n")
```

[← Return to Course Materials](https://bsta-150.github.io/course/)

[Link to qmd (quarto markdown)](https://github.com/BSTA-150/comparingRawSurvivalDatatoExponentialModels/index.rmd)